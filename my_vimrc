
" An example for a vimrc file.
"
" Maintainer:	Bram Moolenaar <Bram@vim.org>
" Last change:	2008 Jul 02
"
" To use it, copy it to
"     for Unix and OS/2:  ~/.vimrc
"	      for Amiga:  s:.vimrc
"  for MS-DOS and Win32:  $VIM\_vimrc
"	    for OpenVMS:  sys$login:.vimrc

" When started as "evim", evim.vim will already have done these settings.
if v:progname =~? "evim"
  finish
endif

" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" allow backspacing over everything in insert mode
set backspace=indent,eol,start
 
if has("vms")
  set nobackup		" do not keep a backup file, use versions instead
else
  set backup		" keep a backup file
endif
set history=1000		" keep 50 lines of command line history
set ruler		" show the cursor position all the time
set showcmd		" display incomplete commands
set incsearch		" do incremental searching

" For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries
" let &guioptions = substitute(&guioptions, "t", "", "g")

" Don't use Ex mode, use Q for formatting
map Q gq

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
endif

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  " Also don't do it when the mark is in the first line, that is the default
  " position when opening a file.
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

  augroup END

else

  set autoindent 		" always set autoindenting on

endif " has("autocmd")

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
		  \ | wincmd p | diffthis
endif

"always see the name of the file in the bottom
set ls=2


"added from 'http://nvie.com/posts/how-i-boosted-my-vim/' bij me
"
"
" Use pathogen to easily modify the runtime path to include all
" plugins under the ~/.vim/bundle directory
"call pathogen#helptags()
"call pathogen#runtime_append_all_bundles()

 call pathogen#infect()

" change the mapleader from \ to ,
let mapleader=","


" Quickly edit/reload the vimrc file
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>


set hidden

set number        " always show line numbers
set nowrap        " don't wrap lines
set tabstop=2     " a tab is was four spaces, now changed for 2
set backspace=indent,eol,start
                  " allow backspacing over everything in insert mode
set autoindent    " always set autoindenting on
set copyindent    " copy the previous indentation on autoindenting
set number        " always show line numbers
set shiftwidth=2  " number of spaces to use for autoindenting
set shiftround    " use multiple of shiftwidth when indenting with '<' and '>'
set showmatch     " set show matching parenthesis
set ignorecase    " ignore case when searching
set smartcase     " ignore case if search pattern is all lowercase,
                  "    case-sensitive otherwise
set smarttab      " insert tabs on the start of a line according to
                  "    shiftwidth, not tabstop
set hlsearch      " highlight search terms
set incsearch     " show search matches as you type


set history=1000         " remember more commands and search history
set undolevels=1000      " use many muchos levels of undo
set wildignore=*.swp,*.bak,*.pyc,*.class
set title                " change the terminal's title
set visualbell           " don't beep
set noerrorbells         " don't beep

filetype plugin indent on

"To set some file type specific settings, you can now use the following
autocmd filetype python set expandtab

"When you write a lot of code, you probably want to obey certain style rules.
" In some programming languages (like Python), whitespace is important,
" so you may not just swap "tabs for spaces and even the number of spaces is
" important.




"Vim can highlight whitespaces for you in a (annoying) convenient way:

"set list
"set listchars=tab:>.,trail:.,extends:#,nbsp:.



"In some files, like HTML and XML files, tabs are fine (and and rb)
"showing them is really annoying, you can disable them easily 
"using an autocmd declaration

autocmd filetype html,xml set listchars-=tab:>.


"There is an easy option to prevent this, however. You can temporarily switch to “paste mode”, simply by setting the following option:


set pastetoggle=<F2>

"The following trick is a really small one, but a super-efficient one, since it strips off two full keystrokes from almost every Vim command:
"
"
"
"
nnoremap ; :
"
"
"
"For example, to save a file, you type :w normally, which means:
"
"   1 Press and hold Shift
"   2 Press ;
"   3 Release the Shift key
"   4 Press w
"   5 Press Return

"This trick strips off steps 1 and 3 for each Vim command. 
"It takes some times for your muscle memory to get 
"used to this new ;w command, 
"but once you use it,
"you don’t want to go back!
"
"
"
"colorscheme lucius
"set background=dark
"
filetype plugin on
set ofu=syntaxcomplete#Complete


"Copy minibufexpl.vim into your plugin directory. Or :source minibufexpl.vim. That is all you need to get started.
"If you want to enable extra functionality (documented in the source) you might want to add the following to your .vimrc:

  let g:miniBufExplMapWindowNavVim = 1
  let g:miniBufExplMapWindowNavArrows = 1
  let g:miniBufExplMapCTabSwitchBufs = 1
  let g:miniBufExplModSelTarget = 1

"These are options that I expect most user will enjoy. 

"Place this file in ~/.vim/autoload/ or $VIMRUNTIME/autoload/
"autocompletion
filetype plugin on

autocmd FileType python set omnifunc=pythoncomplete#Complete






let Tlist_Ctags_Cmd='/usr/local/bin/ctags'


"colorscheme slate
colorscheme jellybeans

set guifont=Menlo\ Regular:h15


"make command line 3 lines high

set ch=3
